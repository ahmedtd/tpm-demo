// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v3.21.12
// source: tpmca.proto

package tpmcapb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TPMVersion int32

const (
	TPMVersion_V1_2 TPMVersion = 0
	TPMVersion_V2_0 TPMVersion = 1
)

// Enum value maps for TPMVersion.
var (
	TPMVersion_name = map[int32]string{
		0: "V1_2",
		1: "V2_0",
	}
	TPMVersion_value = map[string]int32{
		"V1_2": 0,
		"V2_0": 1,
	}
)

func (x TPMVersion) Enum() *TPMVersion {
	p := new(TPMVersion)
	*p = x
	return p
}

func (x TPMVersion) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TPMVersion) Descriptor() protoreflect.EnumDescriptor {
	return file_tpmca_proto_enumTypes[0].Descriptor()
}

func (TPMVersion) Type() protoreflect.EnumType {
	return &file_tpmca_proto_enumTypes[0]
}

func (x TPMVersion) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TPMVersion.Descriptor instead.
func (TPMVersion) EnumDescriptor() ([]byte, []int) {
	return file_tpmca_proto_rawDescGZIP(), []int{0}
}

type ExchangeEKForCertRequest struct {
	state                           protoimpl.MessageState `protogen:"open.v1"`
	TpmVersion                      TPMVersion             `protobuf:"varint,1,opt,name=tpm_version,json=tpmVersion,proto3,enum=TPMVersion" json:"tpm_version,omitempty"`
	EndorsementPublicKey            []byte                 `protobuf:"bytes,2,opt,name=endorsement_public_key,json=endorsementPublicKey,proto3" json:"endorsement_public_key,omitempty"`
	AttestationPublicKey            []byte                 `protobuf:"bytes,3,opt,name=attestation_public_key,json=attestationPublicKey,proto3" json:"attestation_public_key,omitempty"`
	AttestationKeyCreateData        []byte                 `protobuf:"bytes,4,opt,name=attestation_key_create_data,json=attestationKeyCreateData,proto3" json:"attestation_key_create_data,omitempty"`
	AttestationKeyCreateAttestation []byte                 `protobuf:"bytes,5,opt,name=attestation_key_create_attestation,json=attestationKeyCreateAttestation,proto3" json:"attestation_key_create_attestation,omitempty"`
	AttestationKeyCreateSignature   []byte                 `protobuf:"bytes,6,opt,name=attestation_key_create_signature,json=attestationKeyCreateSignature,proto3" json:"attestation_key_create_signature,omitempty"`
	unknownFields                   protoimpl.UnknownFields
	sizeCache                       protoimpl.SizeCache
}

func (x *ExchangeEKForCertRequest) Reset() {
	*x = ExchangeEKForCertRequest{}
	mi := &file_tpmca_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExchangeEKForCertRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExchangeEKForCertRequest) ProtoMessage() {}

func (x *ExchangeEKForCertRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tpmca_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExchangeEKForCertRequest.ProtoReflect.Descriptor instead.
func (*ExchangeEKForCertRequest) Descriptor() ([]byte, []int) {
	return file_tpmca_proto_rawDescGZIP(), []int{0}
}

func (x *ExchangeEKForCertRequest) GetTpmVersion() TPMVersion {
	if x != nil {
		return x.TpmVersion
	}
	return TPMVersion_V1_2
}

func (x *ExchangeEKForCertRequest) GetEndorsementPublicKey() []byte {
	if x != nil {
		return x.EndorsementPublicKey
	}
	return nil
}

func (x *ExchangeEKForCertRequest) GetAttestationPublicKey() []byte {
	if x != nil {
		return x.AttestationPublicKey
	}
	return nil
}

func (x *ExchangeEKForCertRequest) GetAttestationKeyCreateData() []byte {
	if x != nil {
		return x.AttestationKeyCreateData
	}
	return nil
}

func (x *ExchangeEKForCertRequest) GetAttestationKeyCreateAttestation() []byte {
	if x != nil {
		return x.AttestationKeyCreateAttestation
	}
	return nil
}

func (x *ExchangeEKForCertRequest) GetAttestationKeyCreateSignature() []byte {
	if x != nil {
		return x.AttestationKeyCreateSignature
	}
	return nil
}

// See "Trusted Platform Module 2.0 Library Part 1: Architecture" section 22.
type ExchangeEKForCertResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// A TPM credential that allows the EK to decrypt the challenge.
	Credential []byte `protobuf:"bytes,1,opt,name=credential,proto3" json:"credential,omitempty"`
	// A challenge that can be decrypted by the EK.
	//
	// Once decrypted, this field contains a 32-byte AES-256 key that can be
	// used to unseal the sealed_certificate field.
	//
	// Note: The "challenge" terminology comes from the TPM spec, and I
	// personally find it somewhat confusing.  It can be any value, and does not
	// need to be returned to the server.  In theory, we do not need the
	// two-step wrapping with the "sealed_certificate" field, and we could
	// instead cram the sealed_certificate info into the challenge field.
	//
	// I think it may be better to maintain the two-step wrapping, though, since
	// I think the whole "challenge" field needs to be streamed through the TPM.
	// It's probably better to decrypt the large message on the CPU.
	Challenge []byte `protobuf:"bytes,2,opt,name=challenge,proto3" json:"challenge,omitempty"`
	// A SealedCertificate message, serialized and sealed using an AES-256 GCM
	// AEAD.  The key is the unencrypted contents of the "challenge" field.
	SealedCertificate []byte `protobuf:"bytes,3,opt,name=sealed_certificate,json=sealedCertificate,proto3" json:"sealed_certificate,omitempty"`
	// The AES-256 GCM AEAD nonce for the sealed_certificate field.
	SealedCertificateNonce []byte `protobuf:"bytes,4,opt,name=sealed_certificate_nonce,json=sealedCertificateNonce,proto3" json:"sealed_certificate_nonce,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *ExchangeEKForCertResponse) Reset() {
	*x = ExchangeEKForCertResponse{}
	mi := &file_tpmca_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExchangeEKForCertResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExchangeEKForCertResponse) ProtoMessage() {}

func (x *ExchangeEKForCertResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tpmca_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExchangeEKForCertResponse.ProtoReflect.Descriptor instead.
func (*ExchangeEKForCertResponse) Descriptor() ([]byte, []int) {
	return file_tpmca_proto_rawDescGZIP(), []int{1}
}

func (x *ExchangeEKForCertResponse) GetCredential() []byte {
	if x != nil {
		return x.Credential
	}
	return nil
}

func (x *ExchangeEKForCertResponse) GetChallenge() []byte {
	if x != nil {
		return x.Challenge
	}
	return nil
}

func (x *ExchangeEKForCertResponse) GetSealedCertificate() []byte {
	if x != nil {
		return x.SealedCertificate
	}
	return nil
}

func (x *ExchangeEKForCertResponse) GetSealedCertificateNonce() []byte {
	if x != nil {
		return x.SealedCertificateNonce
	}
	return nil
}

type SealedCertificate struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// A certificate issued to the attestation key, that can be used to
	// authenticate to relying parties.
	//
	// Serialized to DER, no PEM wrapping.
	CertificateChain [][]byte `protobuf:"bytes,1,rep,name=certificate_chain,json=certificateChain,proto3" json:"certificate_chain,omitempty"`
	// When should the client begin refreshing their certificate?
	BeginRefreshAt *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=begin_refresh_at,json=beginRefreshAt,proto3" json:"begin_refresh_at,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *SealedCertificate) Reset() {
	*x = SealedCertificate{}
	mi := &file_tpmca_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SealedCertificate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SealedCertificate) ProtoMessage() {}

func (x *SealedCertificate) ProtoReflect() protoreflect.Message {
	mi := &file_tpmca_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SealedCertificate.ProtoReflect.Descriptor instead.
func (*SealedCertificate) Descriptor() ([]byte, []int) {
	return file_tpmca_proto_rawDescGZIP(), []int{2}
}

func (x *SealedCertificate) GetCertificateChain() [][]byte {
	if x != nil {
		return x.CertificateChain
	}
	return nil
}

func (x *SealedCertificate) GetBeginRefreshAt() *timestamppb.Timestamp {
	if x != nil {
		return x.BeginRefreshAt
	}
	return nil
}

var File_tpmca_proto protoreflect.FileDescriptor

const file_tpmca_proto_rawDesc = "" +
	"\n" +
	"\vtpmca.proto\x1a\x1fgoogle/protobuf/timestamp.proto\"\x89\x03\n" +
	"\x18ExchangeEKForCertRequest\x12,\n" +
	"\vtpm_version\x18\x01 \x01(\x0e2\v.TPMVersionR\n" +
	"tpmVersion\x124\n" +
	"\x16endorsement_public_key\x18\x02 \x01(\fR\x14endorsementPublicKey\x124\n" +
	"\x16attestation_public_key\x18\x03 \x01(\fR\x14attestationPublicKey\x12=\n" +
	"\x1battestation_key_create_data\x18\x04 \x01(\fR\x18attestationKeyCreateData\x12K\n" +
	"\"attestation_key_create_attestation\x18\x05 \x01(\fR\x1fattestationKeyCreateAttestation\x12G\n" +
	" attestation_key_create_signature\x18\x06 \x01(\fR\x1dattestationKeyCreateSignature\"\xc2\x01\n" +
	"\x19ExchangeEKForCertResponse\x12\x1e\n" +
	"\n" +
	"credential\x18\x01 \x01(\fR\n" +
	"credential\x12\x1c\n" +
	"\tchallenge\x18\x02 \x01(\fR\tchallenge\x12-\n" +
	"\x12sealed_certificate\x18\x03 \x01(\fR\x11sealedCertificate\x128\n" +
	"\x18sealed_certificate_nonce\x18\x04 \x01(\fR\x16sealedCertificateNonce\"\x86\x01\n" +
	"\x11SealedCertificate\x12+\n" +
	"\x11certificate_chain\x18\x01 \x03(\fR\x10certificateChain\x12D\n" +
	"\x10begin_refresh_at\x18\x02 \x01(\v2\x1a.google.protobuf.TimestampR\x0ebeginRefreshAt* \n" +
	"\n" +
	"TPMVersion\x12\b\n" +
	"\x04V1_2\x10\x00\x12\b\n" +
	"\x04V2_0\x10\x012d\n" +
	"\x14CertificateAuthority\x12L\n" +
	"\x11ExchangeEKForCert\x12\x19.ExchangeEKForCertRequest\x1a\x1a.ExchangeEKForCertResponse\"\x00B)Z'github.com/ahmedtd/tpm-demo/lib/tpmcapbb\x06proto3"

var (
	file_tpmca_proto_rawDescOnce sync.Once
	file_tpmca_proto_rawDescData []byte
)

func file_tpmca_proto_rawDescGZIP() []byte {
	file_tpmca_proto_rawDescOnce.Do(func() {
		file_tpmca_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_tpmca_proto_rawDesc), len(file_tpmca_proto_rawDesc)))
	})
	return file_tpmca_proto_rawDescData
}

var file_tpmca_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_tpmca_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_tpmca_proto_goTypes = []any{
	(TPMVersion)(0),                   // 0: TPMVersion
	(*ExchangeEKForCertRequest)(nil),  // 1: ExchangeEKForCertRequest
	(*ExchangeEKForCertResponse)(nil), // 2: ExchangeEKForCertResponse
	(*SealedCertificate)(nil),         // 3: SealedCertificate
	(*timestamppb.Timestamp)(nil),     // 4: google.protobuf.Timestamp
}
var file_tpmca_proto_depIdxs = []int32{
	0, // 0: ExchangeEKForCertRequest.tpm_version:type_name -> TPMVersion
	4, // 1: SealedCertificate.begin_refresh_at:type_name -> google.protobuf.Timestamp
	1, // 2: CertificateAuthority.ExchangeEKForCert:input_type -> ExchangeEKForCertRequest
	2, // 3: CertificateAuthority.ExchangeEKForCert:output_type -> ExchangeEKForCertResponse
	3, // [3:4] is the sub-list for method output_type
	2, // [2:3] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_tpmca_proto_init() }
func file_tpmca_proto_init() {
	if File_tpmca_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_tpmca_proto_rawDesc), len(file_tpmca_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_tpmca_proto_goTypes,
		DependencyIndexes: file_tpmca_proto_depIdxs,
		EnumInfos:         file_tpmca_proto_enumTypes,
		MessageInfos:      file_tpmca_proto_msgTypes,
	}.Build()
	File_tpmca_proto = out.File
	file_tpmca_proto_goTypes = nil
	file_tpmca_proto_depIdxs = nil
}
